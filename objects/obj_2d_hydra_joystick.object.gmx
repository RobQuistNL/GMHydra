<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_joystick</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (buttons &amp; GMH_BUTTON_START) {
    show_message("Start pressed!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the data and draw the model

// Position
x = GMHD_getJoystickX(controller_id)/2 + obj_2d_hydrabase.x;
y = GMHD_getJoystickY(controller_id)/2 + obj_2d_hydrabase.y;
z = GMHD_getNormalizedJoystickZ(controller_id);

//Get PYR from DLL
rawPitch = radtodeg(GMHD_getJoystickPitch(controller_id));
rawYaw = radtodeg(GMHD_getJoystickYaw(controller_id));
rawRoll = radtodeg(GMHD_getJoystickRoll(controller_id));

//Fix the PYR offsets
pitch = rawPitch + global._GMH_pitchOffset[controller_id];
yaw = rawYaw + global._GMH_yawOffset[controller_id];
roll = rawRoll + global._GMH_rollOffset[controller_id];


// Buttons
buttons = GMHD_getJoystickButtons(controller_id);
trigger = GMHD_getJoystickTrigger(controller_id);

// Stick
joystick_x = GMHD_getJoystickStickX(controller_id);
joystick_y = GMHD_getJoystickStickY(controller_id);

// Others
is_docked = GMHD_getJoystickIsDocked(controller_id);
which_hand = GMHD_getJoystickWhichHand(controller_id);

//Debug data
matrix = GMH_getRotationMatrix(controller_id);
xx = controller_id*360
yyy = 300;
index=0;
for (i=0; i&lt;3; i++) {
    xxx = xx
    for (ii=0; ii&lt;3; ii++) {
        GMH_drawCircleInstrument(xxx,yyy,string(index),matrix[index]);
        index+=1;
        xxx+=48+24+20
    }
    yyy+=48+24
}

// Get quaternions
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,3);

GMH_drawCircleInstrument(24+(controller_id*500),120,'Pitch',pitch);
GMH_drawCircleInstrument(48+148+(controller_id*500),120,'Yaw',yaw);
GMH_drawCircleInstrument(48+148+148+(controller_id*500),120,'Roll',roll);

draw_text(10+(controller_id*360), 500, "Hemisphere tracking:" + string(GMHD_getHemisphereTrackingMode(controller_id)))
draw_text(10+(controller_id*360), 512, "Is filter enabled:" + string(GMHD_getFilterEnabled(controller_id)))
draw_text(10+(controller_id*360), 524, "Is enabled:" + string(GMHD_isControllerEnabled(controller_id)))
draw_text(10+(controller_id*360), 536, "Is docked:" + string(GMHD_getJoystickIsDocked(controller_id)))
draw_text(10+(controller_id*360), 548, "Hand:" + string(GMHD_getJoystickWhichHand(controller_id)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GMHD_calibrateRotation(controller_id, rawPitch, rawYaw, rawRoll);
//GMHD_setHemisphereTrackingMode(controller_id, true);
//GMHD_setFilterEnabled(true);
//show_message("Controller #"+string(controller_id)+" = "+string(GMHD_autoEnableHemisphereTracking(controller_id)));
show_message("Controller #"+string(controller_id)+" = "+string(GMHD_setHemisphereTrackingMode(controller_id, 1)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,13</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
