<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_joystick</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (buttons &amp; GMH_BUTTON_START) {
    show_message("Start pressed!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the data and draw the model

// Position
x = GMHD_getJoystickX(controller_id)/2 + obj_hydrabase.x;
y = GMHD_getJoystickY(controller_id)/2 + obj_hydrabase.y;
z = GMHD_getNormalizedJoystickZ(controller_id);

// Orientation
switch (global.testlol) {
case 0:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 1:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 2:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 3:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 4:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 5:
q0 = GMHD_getJoystickQuaternion(controller_id,0);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 6:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 7:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 8:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

case 9:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 10:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 11:
q0 = GMHD_getJoystickQuaternion(controller_id,1);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

case 12:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 13:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 14:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,3);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

case 15:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,3);
break;

case 16:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 17:
q0 = GMHD_getJoystickQuaternion(controller_id,2);
q1 = GMHD_getJoystickQuaternion(controller_id,3);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

case 18:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 19:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,0);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 20:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,2);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

case 21:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,1);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,2);
break;

case 22:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,0);
q3 = GMHD_getJoystickQuaternion(controller_id,1);
break;

case 23:
q0 = GMHD_getJoystickQuaternion(controller_id,3);
q1 = GMHD_getJoystickQuaternion(controller_id,2);
q2 = GMHD_getJoystickQuaternion(controller_id,1);
q3 = GMHD_getJoystickQuaternion(controller_id,0);
break;

}

//Convert quaternion
rawPitch = GMH_quatToPitch(q0,q1,q2,q3);
rawYaw = GMH_quatToYaw(q0,q1,q2,q3);
rawRoll = GMH_quatToRoll(q0,q1,q2,q3);

//Fix the PYR offsets
pitch = rawPitch + global._GMH_pitchOffset[controller_id];
yaw = rawYaw + global._GMH_yawOffset[controller_id];
roll = rawRoll + global._GMH_rollOffset[controller_id];

pitch = radtodeg(GMHD_getJoystickPitch(controller_id));
yaw = radtodeg(GMHD_getJoystickYaw(controller_id));
roll = radtodeg(GMHD_getJoystickRoll(controller_id));


// Buttons
buttons = GMHD_getJoystickButtons(controller_id);
trigger = GMHD_getJoystickTrigger(controller_id);

// Stick
joystick_x = GMHD_getJoystickStickX(controller_id);
joystick_y = GMHD_getJoystickStickY(controller_id);

// Others
is_docked = GMHD_getJoystickIsDocked(controller_id);
which_hand = GMHD_getJoystickWhichHand(controller_id);

//DEBUG data for 2D controllers.
//GMH_drawCircleInstrument(24+(controller_id*360),120,'Pitch',pitch);
//GMH_drawCircleInstrument(48+48+(controller_id*360),120,'Yaw',yaw);
//GMH_drawCircleInstrument(48+48+48+(controller_id*360),120,'Roll',roll);
//GMH_drawYawInstrument(120+(controller_id*360),260,yaw);

d3d_transform_set_identity();
    //d3d_transform_add_rotation_x(pitch);
    //d3d_transform_add_rotation_y(roll);
    //d3d_transform_add_rotation_z(yaw);
    d3d_add_rotation_quaternion(q0,q1,q2,q3);
    d3d_transform_add_translation(x,y,z);
    d3d_model_draw(global.hydraModel,0,0,0,tex_test);
    d3d_model_draw(global.joystick,0,0,0,tex_test);
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GMHD_calibrateRotation(controller_id, rawPitch, rawYaw, rawRoll);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,13</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
